{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","inputValue","selectValue","isRandom","changedValue","e","target","value","id","setState","getRandom","this","props","todos","onSelectUser","onChengeStatus","availableTodos","randomIndex","Math","floor","random","length","filter","_","index","todo","completed","title","includes","filterTodos","className","type","placeholder","onChange","disabled","onClick","style","float","map","key","readOnly","checked","userId","React","Component","request","url","fetch","then","response","json","result","data","getUser","CurrentUser","user","ms","Promise","resolve","setTimeout","prevProps","onClear","Object","keys","name","email","phone","Button","variant","color","role","aria-label","height","width","App","selectedUserId","selectedUser","event","clearUserInfo","changeStatus","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9fa8c5e5.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport className from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    inputValue: '',\n    selectValue: '',\n    isRandom: false,\n  }\n\n  changedValue = (e) => {\n    const { value, id } = e.target;\n\n    this.setState({\n      [id]: value,\n      isRandom: false,\n    });\n  }\n\n  getRandom = () => {\n    this.setState(state => ({ isRandom: !state.isRandom }));\n  }\n\n  render() {\n    const { todos, onSelectUser, onChengeStatus } = this.props;\n    const { inputValue, selectValue, isRandom } = this.state;\n    const availableTodos = filterTodos();\n\n    function filterTodos() {\n      if (isRandom) {\n        const randomIndex = Math.floor(Math.random() * todos.length);\n\n        return todos.filter(\n          (_, index) => index > randomIndex - 10 && index < randomIndex,\n        );\n      }\n\n      if (selectValue === 'Active') {\n        return todos.filter(todo => !todo.completed);\n      }\n\n      if (selectValue === 'Completed') {\n        return todos.filter(todo => todo.completed);\n      }\n\n      return todos.filter(todo => todo.title.includes(inputValue));\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__sort\">\n          <input\n            id=\"inputValue\"\n            className=\"input is-primary\"\n            type=\"text\"\n            placeholder=\"Enter todo\"\n            value={this.state.inputValue}\n            onChange={e => this.changedValue(e)}\n          />\n\n          <button\n            type=\"button\"\n            className={className(\n              'button',\n              'is-outlined',\n              { 'is-primary': !isRandom },\n              { 'is-danger': isRandom },\n            )}\n            disabled={\n              inputValue !== ''\n              || (selectValue !== ''\n              && selectValue !== 'Choose status')\n            }\n            onClick={this.getRandom}\n          >\n            {isRandom ? 'Cancel random Todos' : 'Get random Todos'}\n          </button>\n\n          <div className=\"select is-primary\" style={{ float: 'right' }}>\n            <select\n              id=\"selectValue\"\n              value={selectValue}\n              onChange={e => this.changedValue(e)}\n            >\n              <option>Choose status</option>\n              <option>Active</option>\n              <option>Completed</option>\n            </select>\n          </div>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {availableTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={className(\n                  'TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                    onChange={e => onChengeStatus(todo.id)}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  id={todo.userId}\n                  className={className(\n                    'button',\n                    'TodoList__user-button',\n                    { 'TodoList__user-button--selected': !todo.completed },\n                  )}\n                  type=\"button\"\n                  onClick={e => onSelectUser(e)}\n                >\n                  {`User#${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onSelectUser: PropTypes.number.isRequired,\n  onChengeStatus: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nfunction request(url) {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport const getTodos = () => request('/todos');\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport Loader from 'react-loader-spinner';\nimport { Button } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    const { userId } = this.props;\n\n    function delay(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    delay(2000)\n      .then(() => getUser(userId))\n      .then(user => this.setState({ user }));\n  }\n\n  componentDidUpdate(prevProps) {\n    const { userId } = this.props;\n\n    if (prevProps.userId === userId) {\n      return;\n    }\n\n    getUser(userId)\n      .then(user => this.setState({ user }));\n  }\n\n  render() {\n    const { user } = this.state;\n    const { onClear } = this.props;\n\n    return (\n      <>\n        {Object.keys(user).length\n          ? (\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\">\n                <span>\n                  {`Selected user: ${user.id}`}\n                </span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">{user.name}</h3>\n              <p className=\"CurrentUser__email\">{user.email}</p>\n              <p className=\"CurrentUser__phone\">{user.phone}</p>\n              <div className=\"CurrentUser__clear\">\n                <>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    onClick={onClear}\n                  >\n                    &#10008; Clear\n                  </Button>\n                </>\n              </div>\n            </div>\n          )\n          : (\n            <div className=\"Preloader\">\n              <h2 className=\"Preloader__title\">\n                <span\n                  role=\"img\"\n                  aria-label=\"loading\"\n                >\n                  Please wait&#128578;\n                </span>\n              </h2>\n              <Loader\n                type=\"Circles\"\n                height={150}\n                width={150}\n                color=\"#C0C0C0\"\n              />\n            </div>\n          )}\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\nimport 'bulma';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => this.setState({\n        todos: todos.filter(todo => todo.id && todo.title\n          && todo.userId && todo.completed !== null),\n      }));\n  }\n\n  selectedUser = (event) => {\n    const { id } = event.target;\n\n    this.setState({ selectedUserId: id });\n  }\n\n  clearUserInfo = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  changeStatus = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onSelectUser={this.selectedUser}\n            onChengeStatus={this.changeStatus}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClear={this.clearUserInfo}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}